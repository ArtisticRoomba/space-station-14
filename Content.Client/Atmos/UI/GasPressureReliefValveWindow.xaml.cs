using System.Globalization;
using Content.Client.UserInterface.Controls;
using Content.Shared.Atmos.Piping.Binary.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.Atmos.UI;

/// <summary>
/// Client-side UI for controlling a gas pressure relief valve.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class GasPressureReliefValveWindow : FancyWindow
{
    private float _flowRate;

    public GasPressureReliefValveWindow()
    {
        RobustXamlLoader.Load(this);

        ThresholdInput.OnTextChanged += _ => SetThresholdButton.Disabled = false;
        SetThresholdButton.OnPressed += _ =>
        {
            ThresholdPressureChanged?.Invoke(ThresholdInput.Text ??= "");
            SetThresholdButton.Disabled = true;
        };

        SetToCurrentPressureButton.OnPressed += _ =>
        {
            if (TargetPressureLabel.Text != null)
            {
                ThresholdInput.Text = TargetPressureLabel.Text;
            }

            SetThresholdButton.Disabled = false;
        };

        ZeroThresholdButton.OnPressed += _ =>
        {
            ThresholdInput.Text = "0";
            SetThresholdButton.Disabled = false;
        };

        Add1000Button.OnPressed += _ => AdjustThreshold(1000);
        Add100Button.OnPressed += _ => AdjustThreshold(100);
        Add10Button.OnPressed += _ => AdjustThreshold(10);
        Subtract10Button.OnPressed += _ => AdjustThreshold(-10);
        Subtract100Button.OnPressed += _ => AdjustThreshold(-100);
        Subtract1000Button.OnPressed += _ => AdjustThreshold(-1000);
        return;

        void AdjustThreshold(float adjustment)
        {
            if (float.TryParse(ThresholdInput.Text, out var currentValue))
            {
                ThresholdInput.Text = (currentValue + adjustment).ToString(CultureInfo.CurrentCulture);
                SetThresholdButton.Disabled = false;
            }
        }
    }

    public event Action<string>? ThresholdPressureChanged;

    /// <summary>
    /// Sets the current threshold pressure label. This is not setting the threshold input box.
    /// </summary>
    /// <param name="threshold"> Threshold to set.</param>
    public void SetThresholdPressureLabel(float threshold)
    {
        TargetPressureLabel.Text = threshold.ToString(CultureInfo.CurrentCulture);
    }

    /// <summary>
    /// Sets the threshold pressure input field with the given value.
    /// When the client opens the UI the field will be autofilled with the current threshold pressure.
    /// </summary>
    /// <param name="input">The threshold pressure value to autofill into the input field.</param>
    public void SetThresholdPressureInput(float input)
    {
        ThresholdInput.Text = input.ToString(CultureInfo.CurrentCulture);
    }

    /// <summary>
    /// Sets the entity to be visible in the UI.
    /// </summary>
    /// <param name="entity"></param>
    public void SetEntity(EntityUid entity)
    {
        EntityView.SetEntity(entity);
    }

    /// <summary>
    /// Updates the UI information for the gas pressure relief valve.
    /// </summary>
    /// <param name="msg">The message containing updated pressure and flow rate values.</param>
    public void UpdateInfo(PressureReliefValveUserMessage msg)
    {
        if (float.TryParse(TargetPressureLabel.Text, out var parsedfloat))
            ToTargetBar.Value = msg.InletPressure / parsedfloat;

        InletPressureLabel.Text = float.Round(msg.InletPressure).ToString(CultureInfo.CurrentCulture);
        OutletPressureLabel.Text = float.Round(msg.OutletPressure).ToString(CultureInfo.CurrentCulture);

        CurrentFlowLabel.Text = float.IsNaN(msg.FlowRate) ? "0" : msg.FlowRate.ToString(CultureInfo.CurrentCulture);
        _flowRate = msg.FlowRate;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        // Defines the flow rate at which the progress bar fills in one second.
        // If the flow rate is >50 L/s, the bar will take <1 second to fill.
        // If the flow rate is <50 L/s, the bar will take >1 second to fill.
        const int barFillPerSecond = 50;

        var maxValue = FlowRateBar.MaxValue;

        // Increment the progress bar value based on elapsed time
        FlowRateBar.Value += (_flowRate / barFillPerSecond) * args.DeltaSeconds;

        // Reset the progress bar when it is fully filled
        if (FlowRateBar.Value >= maxValue)
        {
            FlowRateBar.Value = 0f;
        }
    }
}
